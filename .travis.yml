language: python
matrix:
  allow_failures:
    - os: osx
  include:
    - os: linux
      sudo: required
      python: 3.5
    - os: linux
      sudo: required
      python: 3.6
    - os: osx
      language: generic
      env: TRAVIS_OS_NAME=osx
# python:
#   - "3.5"
#   - "3.6"
# command to install dependencies
services:
  - postgresql 
  - elasticsearch
  - docker
addons:
  postgresql: "9.5"  
before_install:
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install python3; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install elasticsearch; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew postinstall python3; fi
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - sudo apt-get update
  - sudo apt-get -y install docker-ce
  - sudo docker pull capivaraprojects/tensorflow-serving-gyclassifier:v1.0
  - sudo docker run --name=gykernel -d -p 7000:7000 capivaraprojects/tensorflow-serving-gyclassifier:v1.0
  - sudo docker exec $(docker ps -a | grep gykernels | awk "{print $1}") tensorflow_model_server --port=7000 --model_name=inception --model_base_path=/root/saved_models &> tf_server.log &
cache: pip
install:
  - pip3 install -r requirements.txt
before_script:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then rm -rf /usr/local/var/postgres; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then initdb /usr/local/var/postgres; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then pg_ctl -D /usr/local/var/postgres start; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then createuser -s postgres; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew services start elasticsearch; fi
  - sleep 10
  - createuser -s -w -U postgres -e capivara
  - createdb green_eyes -U capivara
  - psql -c "ALTER USER capivara WITH PASSWORD 'test';" -U postgres
  - psql -U capivara green_eyes < backupGreeneyes.sql
  - psql -U capivara green_eyes < missingSQL.sql  
  - export PYTHONPATH=$PYTHONPATH:$(pwd)  
# command to run tests
script:
  - coverage run --source=api setup.py test  
after_success:
  - coveralls
